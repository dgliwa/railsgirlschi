.page-header
  %h2
    Short URL- Part 1
  %p Short URL is an application that allows users to turn a long url into a short one for easier sharing.
%h3 User should be able to...
%h3 Feature 1.1 - Redirect a short URL to a long one
:ruby
  code = <<-HEREDOC
  rails new short_url --skip-test-unit
  cd short_url
  rails generate resource Address location:string name:string
  rake db:migrate
  HEREDOC
= tutorial_for("plain", "Create a new Rails Project", code)
.alert.alert-success
  Coaches, give quick explanation about what each command does. Also explain at a high level how a URL shortener works
  (from a technical perspective; i.e. you visit the short version, the server looks up the long version, and redirects there).


:ruby
  code = <<-HEREDOC
  rails console
  address = Address.new
  address.location = "https://www.google.com/search?q=rails+girls+chicago"
  address.name = "goog"
  address.save
  exit
  HEREDOC
= tutorial_for("plain","Create your first 'short URL'", code)
.alert.alert-success Coaches, explain how the console and the site work together.

:ruby
  code = <<-HEREDOC
    ShortUrl::Application.routes.draw do
      resources :addresses
      match '/s/:name' => "addresses#forward_user", :as => :forward_user
    end
  HEREDOC
= tutorial_for("ruby", "Open <code>config/routes.rb</code>: Create a route that will let us redirect the address name to its corresponding location", code, [3])

.alert.alert-success Coaches, explain how params are mapped from routes to the controller.


:ruby
  code = <<-HEREDOC
    class AddressesController < ApplicationController
      def forward_user
        @address = Address.find_by_name(params[:name])
        redirect_to @address.location
      end
    end
  HEREDOC
= tutorial_for("ruby", "Open <code>app/controllers/addresses_controller.rb</code>: Create an action to find the address by name and redirect to its location", code, [2, 3, 4, 5])

:ruby
  code = <<-HEREDOC
  rails server
  HEREDOC
= tutorial_for("plain","Start your server", code)

= action_for("Visit <code>http://localhost:3000/s/goog</code>", "What happens? If you don't know why, make sure to ask your coach.")





%h3 Feature 1.2 - Create the URLs through a web form instead of the console

We'll do this in three steps:

%ol
  %li Make the form
  %li Handle the form input
  %li Show the user the new short URL

%h4 1. Make the form

:ruby
  code = <<-HEREDOC
    class AddressesController < ApplicationController
      def forward_user
        @address = Address.find_by_name(params[:name])
        redirect_to @address.location
      end

      def new
        @address = Address.new
      end
    end
  HEREDOC
= tutorial_for("ruby", "Open <code>app/controllers/addresses_controller.rb</code>: Create a <strong>'new'</strong> action.", code, [7, 8, 9])

:ruby
  code = <<-HEREDOC
  <h2>Create a shorter URL</h2>
  <%= form_for @address do |form| %>
    <div>
      <%= form.label :name %><br>
      <%= form.text_field :name %>
    </div>

    <div>
      <%= form.label :location, "Location - must start with http://" %><br>
      <%= form.text_field :location %>
    </div>

    <p><%= form.submit "Shorten it!" %></p>
  <% end %>
  HEREDOC
= tutorial_for("ruby", "Create a file <code>app/views/addresses/new.html.erb</code>: Set up a form for a new address.", code)

= action_for("Visit <code>http://localhost:3000/addresses/new</code>", "We don't need to add anything to <code>routes.rb</code> because Rails did it for us.")

.alert.alert-success Coaches, explain the default routes for a resource.

= action_for("Fill out the form and submit it.", "Unknown action! We need to do something with the form input.")


%h4 2. Handle the form input

:ruby
  code = <<-HEREDOC
  def new
    @list = List.new
  end

  def create
    @address = Address.new(params[:address])
    if @address.save
      redirect_to @address
    else
      render action: "new"
    end
  end
  HEREDOC
= tutorial_for("ruby","Open <code>app/controllers/addresses_controller.rb</code>, add the <strong>create</strong> action in the controller.", code, (5..12).to_a)

.alert.alert-success Coaches, explain how form elements are mapped to the params hash.

= action_for("Fill out the form again.", "Was your input saved to the database? How do you know? Ask a coach if you aren't sure.")

%h4 3. Show the user the new short URL

%p Now that we're saving the form input, we need to tell the user their URL was successful.


:ruby
  code = <<-HEREDOC
  def create
    @address = Address.new(params[:address])
    if @address.save
      redirect_to @address
    else
      render action: "new"
    end
  end

  def show
    @address = Address.find(params[:id])
  end
  HEREDOC
= tutorial_for("ruby","Add a <strong>show</strong> action to the controller.", code, [10, 11, 12])

:ruby
  code = <<-HEREDOC
  <h2>Your new short URL</h2>
  <%= forward_user_url(name: @address.name) %> will redirect to <%= @address.location %>
  HEREDOC
= tutorial_for("ruby","Create a corresponding view, <code>app/views/addresses/show.html.erb</code>.", code, [10, 11, 12])

.alert.alert-success Coaches, explain forward_user_url and <code>rake routes</code>.

= action_for("Fill out the form again.", "See the process work all the way through!")

%h3 Feature 1.3 - Add some validations

:ruby
  code = <<-HEREDOC
    class Address < ActiveRecord::Base
      attr_accessible :location, :name

      validates_uniqueness_of :name
    end
  HEREDOC
= tutorial_for("ruby","Open <code>app/models/addresses.rb</code>. Add a validation for the uniqueness of <strong>name</strong>.", code, [4])

= action_for("Fill out the form again. Use a name you used before (like 'goog').")

.alert.alert-success Coaches, explain what happens.

%h3 Feature 1.3 - Show error messages when the validations fail

:ruby
  code = <<-HEREDOC
    <h2>Create a shorter URL</h2>

    <div style="background:red; color: white; font-weight: bold">
      <% @address.errors.full_messages.each do |message| %>
        <%= message %><br>
      <% end %>
    </div>

    <%= form_for @address do |form| %>
      <div>
        <%= form.label :name %>
        <%= form.text_field :name %>
  HEREDOC
= tutorial_for("ruby","Open <code>app/views/addresses/new.html.rb</code>. Add a place for the validation message to be show for the uniqueness of <strong>name</strong>.", code, [*3..7])

= action_for("Fill out the form again. Use a name you used before (like 'goog').")

.alert.alert-success 
  Coaches, if there is time left over in this session, try some of the following:
  %ul
    %li Automatically generate a name
    %li Make sure the generated name is family friendly
    %li Reuse names for duplicate locations
    %li Generate QR codes (<a href="https://developers.google.com/chart/infographics/">https://developers.google.com/chart/infographics/</a>)

