.page-header
  %h2
    Event Tracker - Part 1
  %p Event Tracker is an application that allows users to keep track of who is particpating in different events.  Users can enter participant names under each Event that help manage the event planning.
%h3 User should be able to...
%h3 Feature 1.0 - Verify versions
:ruby
  code = <<-HEREDOC
  ruby -v
  rails -v
  HEREDOC
= tutorial_for("plain", "Check that ruby = 1.9.3 and rails = 3.2.15", code)
.alert.alert-success Consider using http://nitrous.io if your ruby version is below 1.9.3, for rails version run "gem install rails --version=3.2.15".
%h3 Feature 1.1 - View a list of their Events
:ruby
  code = <<-HEREDOC
  rails _3.2.15_ new event_tracker --skip-test-unit
  cd event_tracker
  rails generate resource Event name:string description:string location:string
  rake db:migrate
  rails server
  HEREDOC
= tutorial_for("plain", "Create a new Rails Project", code)
.alert.alert-success Coaches, give quick explanation about what each command does.

= action_for("Visit in your browser <code>http://localhost:3000</code>", "This is the default Rails landing page.  Let's try removing it and see what happens...")

= action_for("Delete the file <code>public/index.html</code> and re-visit <code>http://localhost:3000</code>", "Now what do you see?")

.alert.alert-success Coaches, explain why removing public created an error and how we are going to solve this by modifying rails routes.

:ruby
  code = <<-HEREDOC
    EventTracker::Application.routes.draw do

      resources :events

      root :to => 'events#index'

      # The priority is based upon order of creation:
      # first created -> highest priority.
      ...
  HEREDOC
= tutorial_for("ruby", "Open <code>config/routes.rb</code>: Create a route to the index page", code, [*4..5])


:ruby
  code = <<-HEREDOC
    class EventsController < ApplicationController
      def index
       @events = Event.all
      end
    end
    HEREDOC
= tutorial_for("ruby","Open <code>app/controllers/events_controller.rb</code>: Create an index action in the EventsController", code, [2, 3, 4])

:ruby
  code = <<-HEREDOC
  <h2>Events</h2>

  <% @events.each do |single_event| %>
    <%= single_event.name %> -
    <%= single_event.description %><br />
    <%= single_event.location %>
    <br />
  <% end %>
  HEREDOC
= tutorial_for("ruby","Create <code>app/views/events/index.html.erb</code>: Create an index view", code, [*1..8])

= action_for("Restart the Rails Server", "Since we modified the routes, we have to restart the server.")
= action_for("Visit <code>http://localhost:3000</code>", "Try visiting the page again.  It should only have the text 'Events' but no events because haven't created any yet.")

:ruby
  code = <<-HEREDOC
  rails console
  ev = Event.new
  ev.name = "Rails Girls Chicago"
  ev.description = "Learn Rails in a fun and friendly atmosphere"
  ev.location = "ThoughtWorks offices, Chicago"
  ev.save
  exit
  HEREDOC
= tutorial_for("plain","Create some Events", code)

= action_for("Visit <code>http://localhost:3000</code>", "You should now see your newly created Event.  If you don't, please ask your coach for some help.")

%h3 Feature 1.2 - Create Events using a form on the site

:ruby
  code = <<-HEREDOC
  class EventsController < ApplicationController
    def index
     @events = Event.all
    end

    def new
      @event = Event.new
    end

    def create
      @event = Event.new(params[:event])
      if @event.save
        redirect_to events_url
      else
        render action: "new"
      end
    end
  end
  HEREDOC
= tutorial_for("ruby","Open <code>app/controllers/events_controller.rb</code>, add the <strong>new</strong> and <strong>create</strong> actions in the controller.", code, [*5..17])

:ruby
  code = <<-HEREDOC
  <h2>Create New Event</h2>
  <%= form_for @event do |form| %>
    <div>
      <%= form.label :name %><br />
      <%= form.text_field :name %>
    </div>

    <div>
      <%= form.label :description %><br />
      <%= form.text_field :description %>
    </div>

    <div>
      <%= form.label :location %><br />
      <%= form.text_field :location %>
    </div>

    <p><%= form.submit %></p>
  <% end %>
  HEREDOC
= tutorial_for("ruby","Create <code>app/views/events/new.html.erb</code>, create a form for users to create a new Event", code, [*1..19])

= action_for("Visit <code>http://localhost:3000/events/new</code>", "This is the new form you just created!  Try creating a few Events from this web form.")

%h3 Feature 1.3 - Edit Events from a form

:ruby
  code = <<-HEREDOC
  class EventsController < ApplicationController
    def index
     @events = Event.all
    end

    def new
      @event = Event.new
    end

    def create
      @event = Event.new(params[:event])
      if @event.save
        redirect_to events_url
      else
        render action: "new"
      end
    end

    def edit
      @event = Event.find(params[:id])
    end

    def update
      @event = Event.find(params[:id])

      if @event.update_attributes(params[:event])
        redirect_to events_path
      else
        render action: "edit"
      end
    end
  end
  HEREDOC
= tutorial_for("ruby","Open <code>app/controllers/events_controller.rb</code>, add an <strong>edit</strong> and <strong>update</strong> action.", code, [*18..31])

:ruby
  code = <<-HEREDOC
  <h2>Edit <%= @event.name %></h2>

  <%= form_for @event do |form| %>
    <div>
      <%= form.label :name %><br />
      <%= form.text_field :name %>
    </div>

    <div>
      <%= form.label :description %><br />
      <%= form.text_field :description %>
    </div>

    <div>
      <%= form.label :location %><br />
      <%= form.text_field :location %>
    </div>

    <p><%= form.submit %></p>
  <% end %>
  HEREDOC
= tutorial_for("ruby","Create <code>app/views/events/edit.html.erb</code>, write html/erb for a form to edit a Event", code, [*1..20])


:ruby
  code = <<-HEREDOC
  <h2>Events</h2>

  <% @events.each do |single_event| %>
    <%= single_event.name %> -
    <%= single_event.description %><br />
    <%= single_event.location %>
    <%= link_to "Edit", edit_event_path(single_event) %>
    <br />
  <% end %>
  HEREDOC
= tutorial_for("ruby","Open <code>app/views/events/index.html.erb</code>, add a link to the Edit page for a Event inside the @events.each block", code, [7])


= action_for("Visit <code>http://localhost:3000</code>", "Click on the Edit link for a Event.  You should be able to update your event.  If you can't, please ask your coach for some help.")

%h3 Feature 1.4 - View each Event separately on its own page

:ruby
  code = <<-HEREDOC
  class EventsController < ApplicationController
    def index
     @events = Event.all
    end

    def new
      @event = Event.new
    end

    def create
      @event = Event.new(params[:event])
      if @event.save
        redirect_to events_url
      else
        render action: "new"
      end
    end

    def edit
      @event = Event.find(params[:id])
    end

    def update
      @event = Event.find(params[:id])

      if @event.update_attributes(params[:event])
        redirect_to events_path
      else
        render action: "edit"
      end
    end

    def show
      @event = Event.find(params[:id])
    end
  end
  HEREDOC
= tutorial_for("ruby","Open <code>app/controllers/events_controller.rb</code>, add a show action.", code, [*32..35])

:ruby
  code = <<-HEREDOC
  <h2><%= @event.name %></h2>
  <h3><%= @event.description %></h3>
  <p><%= @event.location %></p>
  HEREDOC
= tutorial_for("ruby","Create <code>app/views/events/show.html.erb</code>, write html/erb code to show Event information.", code, [*1..3])

:ruby
  code = <<-HEREDOC
  <h2>Events</h2>

  <% @events.each do |single_event| %>
    <%= link_to single_event.name, event_path(single_event) %> -
    <%= single_event.description %><br />
    <%= single_event.location %>
    <%= link_to "Edit", edit_event_path(single_event) %>
    <br />
  <% end %>
  HEREDOC
= tutorial_for("ruby","Open <code>app/views/events/index.html.erb</code>, change each Event name into a link to its show page.", code, [4])

= action_for("Visit <code>http://localhost:3000</code>", "Click on the name of an individual Event.  You should be able to see a page of just that Event.")

%h3 Feature 1.5 - Delete Events

:ruby
  code = <<-HEREDOC
  class EventsController < ApplicationController
    def index
     @events = Event.all
    end

    def new
      @event = Event.new
    end

    def create
      @event = Event.new(params[:event])
      if @event.save
        redirect_to events_url
      else
        render action: "new"
      end
    end

    def edit
      @event = Event.find(params[:id])
    end

    def update
      @event = Event.find(params[:id])

      if @event.update_attributes(params[:event])
        redirect_to events_path
      else
        render action: "edit"
      end
    end

    def show
      @event = Event.find(params[:id])
    end

    def destroy
      @event = Event.find(params[:id])
      @event.destroy
      redirect_to events_url
    end
  end
  HEREDOC
= tutorial_for("ruby","Open <code>app/controllers/events_controller.rb</code>, add a destroy action.", code, [*36..41])

:ruby
  code = <<-HEREDOC
  <h2>Events</h2>

  <% @events.each do |single_event| %>
    <%= link_to single_event.name, event_path(single_event) %> -
    <%= single_event.description %><br />
    <%= single_event.location %>
    <%= link_to "Edit", edit_event_path(single_event) %>
    <%= link_to 'Destroy', single_event, method: :delete, data: { confirm: 'Are you sure?' } %>
    <br />
  <% end %>
  HEREDOC
= tutorial_for("ruby","Open <code>app/views/events/index.html.erb</code>, add a link to the Destroy action for each event", code, [8])



.alert.alert-success 
  Coaches, if there is time left over in this session, try some of the following:
  %ul
    %ol Add Flash messages for actions, such as un/successfully adding, updating, deleting, etc (<a href="http://guides.rubyonrails.org/action_controller_overview.html#the-flash" target="new">Flash Messages</a>).
    %ol Add model validations (<a href="http://guides.rubyonrails.org/active_record_validations_callbacks.html#validation-helpers" target="new">Validation Helpers</a>).
    %ol Extract the forms into a partial (<a href="http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials" target="new">Using Partials</a>)
